
@using Newtonsoft.Json
@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@inject ITMDBApi Tmdbapi

@if (configurationLoaded && enableLoadButton)
{
    if (!actorLoaded && !reloadActor) 
    {
        <button class="btn btn-primary" @onclick="LoadActor">Load Actor</button>
    }
}
else
{
    <button disabled class="btn btn-primary" @onclick="LoadActor">Load Actor</button>
}


@if (actorLoaded)
{
    <section class="container-fluid">
        <div class="row">
            <div class="col" style="max-width: 200px;">
                <ActorDisplay Actor="actor" Reload="@ReloadActor" />
            </div>
            <div class="col" style="justify-content:center;">
                <Timer DisplayMovies="@DisplayMovies" Type="Timer.TimerType.PreGame" />

                <MovieContainer DisplayMovies="@displayMovies" Actor="actor" />
              
            </div>
        </div>
    </section>

}
@if (isLoading)
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public EventCallback<bool> SetGameInProgress { get; set; }

    private TMDBConfiguration? tmdbConfiguration;
    private Actor? actor;
    private bool configurationLoaded = false;
    private bool enableLoadButton = false;
    private bool isLoading = false;
    private bool actorLoaded = false;
    private bool reloadActor = false;
    private bool displayMovies = false;
    private string imagePath = "https://image.tmdb.org/t/p/w300/";
    private List<PopularActor> popularActors = new List<PopularActor>();
    private List<PopularActor> poplarActorsUsed = new List<PopularActor>();

    protected override async Task OnInitializedAsync()
    {
        LoadPopularActors();
        tmdbConfiguration = await Tmdbapi.GetConfigurationAsync();
        imagePath = tmdbConfiguration?.Images?.BaseUrl + tmdbConfiguration?.Images?.PosterSizes?.Find(posterSize => posterSize == "w185") ?? "https://image.tmdb.org/t/p/w300/";
        configurationLoaded = true;
    }

    private void LoadPopularActors()
    {
        using (StreamReader stream = File.OpenText(Tmdbapi.PopularActorsPath))
        {
            string json = stream.ReadToEnd();
            popularActors = JsonConvert.DeserializeObject<List<PopularActor>>(json);
            enableLoadButton = popularActors!= null && popularActors.Count > 0;
        }
    }

    private int PickPopularActor()
    {
        int randomIndex = new Random().Next(0, popularActors.Count);
        PopularActor? popularActor = popularActors[randomIndex];
        while (poplarActorsUsed.Any(a => a.Id == popularActor!.Id))
        {
            randomIndex = new Random().Next(0, popularActors.Count);
            popularActor = popularActors[randomIndex];
        }
        poplarActorsUsed.Add(popularActor!);

        return popularActor!.Id;
    }

    protected async void LoadActor()
    {
        await SetGameInProgress.InvokeAsync(true);
        isLoading = true;
        actorLoaded = false;
        displayMovies = false;
        actor = new Actor();
        
        actor = await Tmdbapi.GetActorByIdAsync(PickPopularActor());
        actor.CastAndCrewCredits = await Tmdbapi.GetCastAndCrewCreditsAsync(actor.Id);

        actorLoaded = string.IsNullOrEmpty(actor.Name) ? false : true;
        if (actorLoaded)
        {
            actor.ProfilePath = $"{imagePath}{actor.ProfilePath}";
        }
        else
        {
            actor.Name = "Actor not found";
            actor.ProfilePath = "https://via.placeholder.com/150";
        }
        isLoading = actorLoaded ? false : true;
        reloadActor = false;
        StateHasChanged();
    }

    private void ReloadActor()
    {
        reloadActor = true;
        LoadActor();
    }

    private void DisplayMovies(bool display)
    {
        displayMovies = display;
        StateHasChanged();
    }
}
