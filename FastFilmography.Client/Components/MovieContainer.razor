@inject ITMDBApi Tmdbapi
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

@if (_movies.Count == 0)
{
    <p>Loading movies...</p>
}
else
{
    <section class="container-fluid" width="400px">
        <div class="row">
            @foreach (Movie movie in _movies)
            {
                <MovieDisplay MovieSelected="@CheckMovieSelection" DisplayMovie="@_displayMovies" Movie="movie" />
            }
        </div>
    </section>
}



@code {
    [Parameter]
    public Actor Actor { get; set; }

    [Parameter]
    public bool DisplayMovies { get; set; }

    [Parameter]
    public EventCallback<bool> ProcessMovieSelection { get; set; }

    [Parameter]
    public EventCallback DisableMovieSelection { get; set; }

    private TMDBConfiguration? _tmdbConfiguration;
    private string _imagePath = "https://image.tmdb.org/t/p/w300/";
    private string answerText = "";
    private string _gameResultMessage = string.Empty;
    
    private bool _displayMovies = false;
    private bool _keySelected = false; 
    private bool _isSelectionCorrect = false;

    private List<Movie> _movies = new List<Movie>();
    private Movie _answerKey = new Movie();
    
    

    protected override async Task OnInitializedAsync()
    {
        _tmdbConfiguration = await Tmdbapi.GetConfigurationAsync();
        _imagePath = _tmdbConfiguration?.Images?.BaseUrl + _tmdbConfiguration?.Images?.PosterSizes?.Find(posterSize => posterSize == "w185") ?? "https://image.tmdb.org/t/p/w300/";
        if (Actor != null)
        {
            _movies = await LoadMovies();
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        _displayMovies = DisplayMovies;
    }

    private async Task<List<Movie>> LoadMovies()
    {
        List<Movie> movies = new();
        TopRatedMovieDataSet topRatedMovies = new();
        List<Movie> possibleKeys = new();
        List<int> idsUsed = new();
        int randomIndex = 0;

        while(movies.Count < 5)
        {
            randomIndex = new Random().Next(0, Actor.CastAndCrewCredits.CastCredits.Count);
            Movie movie = await Tmdbapi.GetMovieById(Actor.CastAndCrewCredits.CastCredits[randomIndex].Id, false);
            if (movie != null
                && !string.IsNullOrEmpty(movie.Title)
                && !string.IsNullOrEmpty(movie.Overview)
                && !string.IsNullOrEmpty(movie.PosterPath)
                && !idsUsed.Contains(movie.Id))
            {
                idsUsed.Add(movie.Id);
                movie.PosterPath = _imagePath + movie.PosterPath;
                movies.Add(movie);
            }
        }

        randomIndex = new Random().Next(1, 25);
        topRatedMovies = await Tmdbapi.GetMoviesForKeyAsync(randomIndex);
        possibleKeys = topRatedMovies.Movies
            .Where(m => m.OriginalLanguage == "en")
            .ToList();

        while(!_keySelected)
        {
            randomIndex = new Random().Next(0, possibleKeys.Count);

            Movie possibleKey = possibleKeys[randomIndex];
            possibleKey.Credits = await Tmdbapi.GetCastAndCrewForMovieAsync(possibleKey.Id);

            bool actorInPossibleKey = possibleKey.Credits.Cast.Any(c => c.Id == Actor.Id);
            if (actorInPossibleKey == false)
            {
                _answerKey = possibleKey;
                _answerKey.PosterPath = _imagePath + _answerKey.PosterPath;
                _keySelected = true;
                movies.Add(_answerKey);
            }
        }
        movies = movies.OrderBy(m => m.Title).ToList();
        return movies;
    }

    private async Task CheckMovieSelection(int movieId)
    {
        _isSelectionCorrect = movieId == _answerKey.Id;
        //answerText = movieId == _answerKey.Id ? "Correct!" : "Try Again!";
        await ProcessMovieSelection.InvokeAsync(_isSelectionCorrect);
    }

    public void DisableMovie()
    {
        bool movieDisabled = false;
        int randomIndex = new Random().Next(0, _movies.Count);
        while(movieDisabled == false)
        {
            if (_movies[randomIndex].Selectable == true && _movies[randomIndex].Id != _answerKey.Id)
            {
                _movies[randomIndex].Selectable = false;
                movieDisabled = true;
            }
            else{
                randomIndex = new Random().Next(0, _movies.Count);
            }
        }
        StateHasChanged();
    }

    public void UpdateGameResultMessage(string message)
    {
        _gameResultMessage = message;
        StateHasChanged();
    }
}
